{"mappings":"AAsGA,MA6JMA,EAAgBC,SAASC,cAAc,QACvCC,EAAWF,SAASC,cAAc,UAClCE,EAAaH,SAASC,cAAc,UAC1C,IAAIG,GAAiB,EAGjBC,EAAO,EAMXN,EAAcO,iBAAiB,SAAS,KAEtC,GAAID,EAJa,EAKf,OA+CJ,WACE,GAAID,EACF,OAEFA,GAAiB,EACjBD,EAAWI,UAAUC,IAAI,cACzBC,YAAW,KACTN,EAAWI,UAAUG,OAAO,cAC5BN,GAAiB,CAAK,GACrB,I,CAxDMO,IAiBX,WACE,MAAMC,EAAS,IAAIC,gBAAgB,CACjCC,OA1BQ,GA2BRC,MAAOV,IAGT,OAAOW,MAAM,8CAA8CJ,KAAUK,MAClEC,IACC,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MAAM,G,EAzB1BC,GACGN,MAAMO,KA6BX,SAAqBA,GACnB,MAAMC,EAASD,EACZE,KAAI,EAACC,GAAEA,EAAEC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,KAChB,0CACsBF,EAAMG,MAAM,EAAG,0CACnBJ,yCACEG,yCACAD,yBAG5BG,KAAK,IACR9B,EAAS+B,mBAAmB,YAAaR,E,CAvCrCS,CAAYV,GAEZnB,GAAQ,EAGJA,EAAO,IACTN,EAAcoC,YAAc,mBAAkB,IAGjDC,OAAOC,GAAUC,QAAQC,IAAIF,IAAO","sources":["src/js/07-alona.js"],"sourcesContent":["// Write a function which returns a day number that was some amount of days ago from the passed date.\n\n// const getPastDay = (date, days) => {\n//     const MS_PER_DAY = 1000 * 60 * 60 * 24\n//     const msPerDays = MS_PER_DAY * days\n//     const delta = date - msPerDays\n//     const lastDate = new Date(delta)\n//     return lastDate.getDate()\n// }\n\n// const date = new Date(2022, 0, 2);\n// console.log(getPastDay(date, 1)); // 1, (1 Jan 2022)\n// console.log(getPastDay(date, 2)); // 31, (31 Dec 2021)\n// console.log(getPastDay(date, 365)); // 2, (2 Jan 2021)\n\n// const timerId = setTimeout(() => {\n//   console.log(\"Hello!\");\n// }, 3000);\n\n// clearTimeout(timerId);\n\n// const timerId = setInterval(() => {\n//   console.log(\"Hello!\");\n// }, 500);\n\n// setTimeout(()=> {clearInterval(timerId)}, 3000)\n\n// class CountdownTimer {\n//   constructor({ selector, targetDate }) {\n//     this.targetDate = targetDate;\n//     this.daysSpan = document.querySelector(`${selector} [data-value=\"days\"]`);\n//     this.hoursSpan = document.querySelector(`${selector} [data-value=\"hours\"]`);\n//     this.minsSpan = document.querySelector(`${selector} [data-value=\"mins\"]`);\n//     this.secsSpan = document.querySelector(`${selector} [data-value=\"secs\"]`);\n//     this.updateTimer();\n//   }\n\n//   updateTimer() {\n//     setInterval(() => {\n//       const currentTime = Date.now();\n//       const delta = this.targetDate - currentTime;\n//       const { days, hours, minutes, seconds } = this.convert(delta);\n//       this.daysSpan.textContent = days;\n//       this.hoursSpan.textContent = hours;\n//       this.minsSpan.textContent = minutes;\n//       this.secsSpan.textContent = seconds;\n//     }, 1000);\n//   }\n\n//   convert(ms) {\n//     const second = 1000;\n//     const minute = second * 60;\n//     const hour = minute * 60;\n//     const day = hour * 24;\n//     const days = Math.floor(ms / day);\n//     const hours = Math.floor((ms % day) / hour);\n//     const minutes = Math.floor(((ms % day) % hour) / minute);\n//     const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//     return { days, hours, minutes, seconds };\n//   }\n// }\n\n// const timer1 = new CountdownTimer({\n//   selector: \"#timer-1\",\n//   targetDate: new Date(\"Jan 1, 2023\"),\n// });\n\n// const timer2 = new CountdownTimer({\n//   selector: \"#timer-2\",\n//   targetDate: new Date(\"May 9, 2023\"),\n// });\n\n// const timer3 = new CountdownTimer({\n//   selector: \"#timer-3\",\n//   targetDate: new Date(\"Nov 1, 2022\"),\n// });\n\n// Write a function that formats a date in such format \"YYYY/MM/DD HH:mm\".\n\n// console.log(formatDate(new Date(\"6/15/2019 09:15:00\"))); // \"2019/06/15 09:15\"\n// console.log(formatDate(new Date())); // gets current local times\n\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\n// const delay = (ms) => {\n//   return new Promise((resolve) => {\n//     setTimeout(() => {\n//       resolve(ms);\n//     }, ms);\n//   });\n// };\n\n// const logger = (time) => console.log(`Resolved after ${time}ms`);\n\n// // Вызовы функции для проверки\n// delay(2000).then(logger); // Resolved after 2000ms\n// delay(1000).then(logger); // Resolved after 1000ms\n// delay(1500).then(logger); // Resolved after 1500ms\n\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: \"Mango\", active: true },\n  { name: \"Poly\", active: false },\n  { name: \"Ajax\", active: true },\n  { name: \"Lux\", active: false },\n];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n// };\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve) => {\n    const updatedUsers = allUsers.map((user) =>\n      user.name === userName ? { ...user, active: !user.active } : user\n    );\n\n    resolve(updatedUsers);\n  });\n};\n\nconst logger = (updatedUsers) => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\n// toggleUserState(users, \"Mango\").then(logger);\n// toggleUserState(users, \"Lux\").then(logger);\n\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  // const makeTransaction = (transaction, onSuccess, onError) => {\n  //   const delay = randomIntegerFromInterval(200, 500);\n  \n  //   setTimeout(() => {\n  //     const canProcess = Math.random() > 0.3;\n  \n  //     if (canProcess) {\n  //       onSuccess(transaction.id, delay);\n  //     } else {\n  //       onError(transaction.id);\n  //     }\n  //   }, delay);\n  // };\n  \n  const logSuccess = ([id, time]) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = (id) => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  const makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n  \n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n        if (canProcess) {\n          resolve([transaction.id, delay]);\n        } else {\n          reject(transaction.id);\n        }\n      }, delay);\n    });\n  \n    // setTimeout(() => {\n    //   const canProcess = Math.random() > 0.3;\n  \n    //   if (canProcess) {\n    //     onSuccess(transaction.id, delay);\n    //   } else {\n    //     onError(transaction.id);\n    //   }\n    // }, delay);\n  };\n  /*\n   * Работает так\n   */\n  // makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n  // makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n  // makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n  // makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n  /*\n   * Должно работать так\n   */\n//   makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n  \n//   makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n  \n//   makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n  \n//   makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n\n\n// const fetchUsersBtn = document.querySelector(\".btn\");\n// const userList = document.querySelector(\".user-list\");\n\n// fetchUsersBtn.addEventListener(\"click\", () => {\n//   fetchUsers()\n//     .then((users) => renderUserList(users))\n//     .catch((error) => console.log(error));\n// });\n\n// function fetchUsers() {\n//    return fetch(\"https://jsonplaceholder.typicode.com/users?_limit=9&_sort=name\").then(\n//     (response) => {\n//       if (!response.ok) {\n//         throw new Error(response.status);\n//       }\n//       return response.json();\n//     }\n//   );\n// }\n\n// function renderUserList(users) {\n//   const markup = users\n//     .map((user) => {\n//       return `<li>\n//           <p><b>Name</b>: ${user.name}</p>\n//           <p><b>Email</b>: ${user.email}</p>\n//           <p><b>Company</b>: ${user.company.name}</p>\n//         </li>`;\n//     })\n//     .join(\"\");\n//   userList.innerHTML = markup;\n// }\n\n\n// const headers = new Headers({\n//   \"Content-Type\": \"application/json\",\n//   \"X-Custom-Header\": \"custom value\",\n// });\n// console.log(headers);\n// headers.append(\"Content-Type\", \"text/bash\");\n// headers.append(\"X-Custom-Header\", \"custom value\");\n// headers.has(\"Content-Type\"); // true\n// headers.get(\"Content-Type\"); // \"text/bash\"\n// headers.set(\"Content-Type\", \"application/json\");\n// headers.delete(\"X-Custom-Header\");\n// console.log(headers.get(\"Content-Type\"));\n\nconst fetchPostsBtn = document.querySelector(\".btn\");\nconst userList = document.querySelector(\".posts\");\nconst alertPopup = document.querySelector(\".alert\");\nlet isAlertVisible = false;\n\n// Controls the group number\nlet page = 1;\n// Controls the number of items in the group\nlet limit = 20;\n// In our case total number of pages is calculated on frontend\nconst totalPages = 100 / limit;\n\nfetchPostsBtn.addEventListener(\"click\", () => {\n  // Check the end of the collection to display an alert\n  if (page > totalPages) {\n    return toggleAlertPopup();\n  }\n\n  fetchPosts()\n    .then((posts) => {\n      renderPosts(posts);\n      // Increase the group number\n      page += 1;\n\n      // Replace button text after first request\n      if (page > 1) {\n        fetchPostsBtn.textContent = \"Fetch more posts\";\n      }\n    })\n    .catch((error) => console.log(error));\n});\n\nfunction fetchPosts() {\n  const params = new URLSearchParams({\n    _limit: limit,\n    _page: page\n  });\n\n  return fetch(`https://jsonplaceholder.typicode.com/posts?${params}`).then(\n    (response) => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      return response.json();\n    }\n  );\n}\n\nfunction renderPosts(posts) {\n  const markup = posts\n    .map(({ id, title, body, userId }) => {\n      return `<li>\n          <h2 class=\"post-title\">${title.slice(0, 30)}</h2>\n          <p><b>Post id</b>: ${id}</p>\n          <p><b>Author id</b>: ${userId}</p>\n          <p class=\"post-body\">${body}</p>\n        </li>`;\n    })\n    .join(\"\");\n  userList.insertAdjacentHTML(\"beforeend\", markup);\n}\n\nfunction toggleAlertPopup() {\n  if (isAlertVisible) {\n    return;\n  }\n  isAlertVisible = true;\n  alertPopup.classList.add(\"is-visible\");\n  setTimeout(() => {\n    alertPopup.classList.remove(\"is-visible\");\n    isAlertVisible = false;\n  }, 3000);\n}\n\n"],"names":["$6b884edb17696958$var$fetchPostsBtn","document","querySelector","$6b884edb17696958$var$userList","$6b884edb17696958$var$alertPopup","$6b884edb17696958$var$isAlertVisible","$6b884edb17696958$var$page","addEventListener","classList","add","setTimeout","remove","$6b884edb17696958$var$toggleAlertPopup","params","URLSearchParams","_limit","_page","fetch","then","response","ok","Error","status","json","$6b884edb17696958$var$fetchPosts","posts","markup","map","id","title","body","userId","slice","join","insertAdjacentHTML","$6b884edb17696958$var$renderPosts","textContent","catch","error","console","log"],"version":3,"file":"07-alona.d4628239.js.map"}