{"mappings":"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","sources":["src/js/02.js"],"sourcesContent":["\nconst initialData = [\n  {\n    id: '1',\n    title: `Apple. Эволюция компьютера`,\n    author: `Владимир Невзоров`,\n    img: `https://bukva.ua/img/products/449/449532_200.jpg`,\n    plot: `Богато иллюстрированный хронологический справочник по истории компьютеров, в котором увлекательно \n    и в структурированном виде изложена информация о создании и развитии техники Apple на фоне истории \n    персональных компьютеров в целом.\n    В книге даны описания десятков наиболее значимых моделей устройств как Apple, так и других производителей, \n    сопровождающиеся большим количеством оригинальных студийных фотографий.\n    Книга предназначена для широкого круга читателей, интересующихся историей электроники. \n    Она также может послужить источником вдохновения для дизайнеров, маркетологов и предпринимателей.`,\n  },\n  {\n    id: '2',\n    title: `Как объяснить ребенку информатику`,\n    author: `Кэрол Вордерман`,\n    img: `https://bukva.ua/img/products/480/480030_200.jpg`,\n    plot: `Иллюстрированная энциклопедия в формате инфографики о технических, социальных и культурных аспектах \n    в информатике. Пошагово объясняет, как детям максимально эффективно использовать компьютеры и интернет-сервисы, \n    оставаясь в безопасности. \n    Книга рассказывает обо всем: от хранения данных до жизни в интернет-пространстве, \n    от программирования до компьютерных атак. О том, как компьютеры функционируют, о современном программном \n    обеспечении, устройстве Интернета и цифровом этикете. Все концепты - от хакера до биткоина - \n    объясняются наглядно с помощью иллюстраций и схем.`,\n  },\n  {\n    id: '3',\n    title: `Путь скрам-мастера. #ScrumMasterWay`,\n    author: `Зузана Шохова`,\n    img: `https://bukva.ua/img/products/480/480090_200.jpg`,\n    plot: `Эта книга поможет вам стать выдающимся скрам-мастером и добиться отличных результатов с вашей командой. \n    Она иллюстрированная и легкая для восприятия - вы сможете прочитать ее за выходные, а пользоваться полученными \n    знаниями будете в течение всей карьеры.\n    Основываясь на 15-летнем опыте, Зузана Шохова рассказывает, какие роли и обязанности есть у скрам-мастера, \n    как ему решать повседневные задачи, какие компетенции нужны, чтобы стать выдающимся скрам-мастером, \n    какими инструментами ему нужно пользоваться.`,\n  },\n];\n\n// 1)Для примера мы хотим работать не с initialData хранилищем, а записать данные в localStorage что потом можно было add,remowe,edit их\n\n// При перезагрузки страницы наш скрипт читается сверху вниз и инициализируется заново, он доходит до 44 строки и перезаписывает и\n// все равно есть там что т о или нет, вся логика начинается с нуля поэтому мы делаем проверку мы в localStorage не записываем если\n// он не пустой\nif (!localStorage.getItem('books')) {\n  localStorage.setItem('books', JSON.stringify(initialData));\n}\n\n// 1) Задача в руте (корне) создать 2 Дива и дбавить им классы\nconst leftDiv = document.createElement('div');\nconst rightDiv = document.createElement('div');\nleftDiv.classList.add('left');\nrightDiv.classList.add('right');\n\n//2) добавляем в root Но сначала надо получить ссылку на родителя\nconst rootDiv = document.querySelector('#root');\nrootDiv.append(leftDiv, rightDiv);\n\nconst title = document.createElement('h1');\ntitle.textContent = 'Library';\nconst list = document.createElement('ul');\nconst addBtn = document.createElement('button');\naddBtn.textContent = 'ADD';\nleftDiv.append(title, list, addBtn);\n\n// 3) при кликании на название книги на (р-шку) справа должна появляться развернутая информация\n// нужно создать слушателей для наших р -шек\n// чтоб удобно было обращаться к р-шке  вписываем ей класс class =\"book-title\" в шаблон\n\nfunction renderBooksList() {\n  const books = JSON.parse(localStorage.getItem('books'));\n  // Фу парсит данные из локальнюхранилища, пробегается по ним map-ом, на основании каждого из объекта в массиве созд.разметку\n  const markup = books\n    .map(({ title, id }) => {\n      return `<li data-id ='${id}'><p class = \"book-title\">${title}</p><button class =\"edit\">Edit</button><button class =\"delete\">Delete</button></li>`;\n    })\n    .join(''); // преобразуем в строку .join('');\n  // Сначала очищаем перед вставкой, чтоб не было задвоения\n  list.innerHTML = '';\n  // добавляем разметку в наш список (list - пустой тег ul, который мы заапендили выше)\n  list.insertAdjacentHTML('afterbegin', markup);\n  // получаем ссылки на все р-шки(названия книг) и добавляем каждой из них слушателя, обработчик события click и колбек фу renderPreview\n  const bookTitles = document.querySelectorAll('.book-title');\n  bookTitles.forEach(el => {\n    el.addEventListener('click', renderPreview);\n  });\n  //8)\n  const delBtns = document.querySelectorAll('.delete');\n  delBtns.forEach(el => {\n    el.addEventListener('click', deleteBook);\n  });\n\n  // 26) edit\n  const editBtns = document.querySelectorAll('.edit');\n  editBtns.forEach(el => {\n    el.addEventListener('click', editBook);\n  });\n}\n\n// вызываем фу чтоб создался списочек книг\nrenderBooksList();\n\n// 4) чтоб отображать превьюшку нужной книги нужно ее идентифицировать и мы добавляем датаАтрибут data-id =''\n// Через e.target ищем р-шку, потом ее родителя (там где id) --  e.target.parentNode\n// и у этой li-шки через датаАтрибут dataset.id считываем id  (e.target.parentNode.dataset.id)\n\n// 5) в renderPreview нам нужно распарсить наш массив\nfunction renderPreview(e) {\n  const books = JSON.parse(localStorage.getItem('books'));\n  const bookId = e.target.parentNode.dataset.id;\n  // по полученному id-ку находим нашу книгу (с которой мы взаимодействуем кликая на p-шку в массиве\n  const book = books.find(({ id }) => id === bookId);\n  // 7) созд перем markup в котор записыв результ вызова фу createPreviewMarkup ( с нашей найденной книгой - book)\n  const markup = createPreviewMarkup(book);\n  console.log(markup);\n  rightDiv.innerHTML = markup;\n}\n\n// 6) Фу принимает объект книги и возвращает разметку для Превьюшки\nfunction createPreviewMarkup({ title, author, img, plot, id }) {\n  return `<div id ='${id}' class =\"preview\">\n<h2>${title}</h2>\n<p>${author}</p>\n<img src ='${img}'/>\n<p>${plot}</p>\n</div>`;\n}\n\n// 9)Чтоб реализовать delete Добавляем в размутку на кнопку class =\"delete\" и в той же Фу renderBooksList и добавляем\n// каждой из них слушателя, обработчик события click и колбек фу\n\nfunction deleteBook(e) {\n  const books = JSON.parse(localStorage.getItem('books'));\n  const bookId = e.target.parentNode.dataset.id;\n\n  //10)чтоб удалить выбранный елемент мы используем метод который возвращает массив С (либо в нашем случае без) выбранным(и) элемен\n  const filteredArray = books.filter(({ id }) => id !== bookId);\n\n  //11) Теперь нам надо Перезаписать localStorage чтоб обновить\n  localStorage.setItem('books', JSON.stringify(filteredArray));\n\n  //32)Делаем проверку! Если в правой части экрана отрендерина книга которую мы сейчас удаляем - должна удалиться и превьюшка\n  // для этого добавляем id-шник (дата атрибут даже лучше бы был) и class =\"preview\" в разметку createPreviewMarkup\n  const preview = document.querySelector('.preview');\n  if (preview !== null && bookId === preview.id) {\n    rightDiv.innerHTML = '';\n  }\n\n  // 12)И вызвать фу renderBooksList которая заново созд.разметку\n  //* 12)важно-вызав этой фу к старой разметке добавляет новую => в фу renderBooksList надо добавить сначала очистку list.innerHTML =''\n  renderBooksList();\n}\n\n// 13)Mы хотим чтоб открывалась типа форма для заполнения полей для addBook, поэтому создаем фу которая будет\n// создавать разметку формы для заполнения\naddBtn.addEventListener('click', addBook);\n//14)\nfunction addBook() {\n  //19)\n  const newBook = {\n    id: `${Date.now()}`,\n    title: '',\n    author: '',\n    img: '',\n    plot: '',\n  };\n  //16)\n  const markup = createFormMarkup(newBook);\n  rightDiv.innerHTML = markup;\n\n  // 21)Добавляем Фу fillObject\n  fillObject(newBook);\n\n  //17)после того как разметка есть мы делаем ссылку на Форму\n  const form = document.querySelector('form');\n  form.addEventListener('submit', e => {\n    e.preventDefault();\n    // 22) далее мы можем Очистить форму! но мы хотим чтоб у нас при сабмите формы справа появлялась наша разметка li ,\n    //нам нужно запушить новый объект книги в localStorage для этого в JSON.parse(localStorage.getItem('books')); пушим объект\n\n    const books = JSON.parse(localStorage.getItem('books'));\n\n    // 33) Перед тем как пушить проверяем на пустые поля тк newBook уже обработан ФУ fillObject и юзер может нафакапить\n    const values = Object.values(newBook);\n    if (values.some(value => value === '')) {\n      alert('Fill all fields!');\n      return;\n    }\n\n    books.push(newBook);\n    // 23) перезаписываем данные в localStorage\n    localStorage.setItem('books', JSON.stringify(books));\n    //24 перерисовываем разметку\n    renderBooksList();\n    //25 переиспользуем renderPreview создаем разметку на основании newBook и перерисовываем разметку\n    const markup = createPreviewMarkup(newBook);\n    console.log(markup);\n    rightDiv.innerHTML = markup;\n  });\n}\n\n// 15)\nfunction createFormMarkup({ title, author, img, plot }) {\n  return `<form>\n  <label>Name:<input type='text' name='title' value='${title}'/></label>\n  <label>Author:<input type='text' name='author' value='${author}'/></label>\n  <label>Image:<input type='text' name='img' value='${img}'/></label>\n  <label>Plot:<input type='text' name='plot' value='${plot}'/></label>\n  <button>Save</button>\n  </form>`;\n}\n// 18)создаем Фу внутри котор будет получать доступ к нашим инпутам и считывать значение value и записывать в св-ва нашего Объекта новой\n// книги !    19) Но где нам взять эту новую книгу? нам нужен какойто шаблончик Нью бука и этот шаблон создаем в Fu addBook\n// и в этом объекте будут такиеже ключи как в наших объектах книги только пустые\n//* Также мы не можем позволить пользователям вводить id (т.к. мы не знаем что введут) поэтому id ьудем генерировать сами!!\n// поэтому в addBook() - id --- будет id: '${Date.now()}'\n//18)\nfunction fillObject(book) {\n  const inputs = document.querySelectorAll('input');\n  inputs.forEach(e => e.addEventListener('change', changeHandler));\n  //20)\n  function changeHandler(e) {\n    //в буук с ключом ключом name записываем value с инпута\n    book[e.target.name] = e.target.value;\n  }\n}\n\n//27) хотим чтоб при кликании кнопки edit открывалась заполненная форма с соответствующими полями\nfunction editBook(e) {\n  const books = JSON.parse(localStorage.getItem('books'));\n  const bookId = e.target.parentNode.dataset.id;\n  // 28) по полученному id-ку находим нашу книгу (с которой мы взаимодействуем кликая на p-шку в массиве\n  const book = books.find(({ id }) => id === bookId);\n  // 29) нужно в нашу форму ( Фу createFormMarkup())) в инпут подставить value из localStorage\n  // для этого добавили в Фу function createFormMarkup({ title, author, img, plot } деструктуризацию и value =`${title}` и т.д. для всех\n  //*  но после добавления деструктуризации теперь Фу ожидает объект как параметр и в пункт 16) в createFormMarkup(добавляем!)\n  //и здесь создаем перем в котор запишем рез вызыва обновленной Фу createFormMarkup\n  const markup = createFormMarkup(book);\n  rightDiv.innerHTML = markup;\n\n  //30) Далее вызываем fillObject передаем наш book и создаем логику по Сабмиту форму и переиспользуем логику из форм сабмит\n  fillObject(book);\n  const form = document.querySelector('form');\n  form.addEventListener('submit', e => {\n    e.preventDefault();\n\n    // const values = Object.values(book);\n    // if (values.some(value => value === '')) {\n    //   alert('Fill all fields!');\n    //   return;\n    // }\n    const books = JSON.parse(localStorage.getItem('books'));\n    //31) пишем логику чтоб обновить локальное хранилище ЗАПУШИТЬ не МожеМ! потому что добавит в конец, а мы не хот.менять располож.\n    // Попробуем найти индекс текущей книги через findIndex\n    const index = books.findIndex(({ id }) => id === bookId);\n    books[index] = book;\n    localStorage.setItem('books', JSON.stringify(books));\n    renderBooksList();\n    const markup = createPreviewMarkup(book);\n    rightDiv.innerHTML = markup;\n  });\n}\n\n//32) Если в правой части экрана отрендерина книга которую мы сейчас удаляем - должна удалиться и превьюшка Решаем проблему!\n"],"names":["initialData","id","title","author","img","plot","localStorage","getItem","setItem","JSON","stringify","leftDiv","document","createElement","rightDiv","classList","add","rootDiv","querySelector","append","textContent","list","addBtn","renderBooksList","markup","parse","map","join","innerHTML","insertAdjacentHTML","querySelectorAll","forEach","el","addEventListener","renderPreview","deleteBook","editBook","e","books","bookId","target","parentNode","dataset","createPreviewMarkup","find","console","log","filteredArray","filter","preview","addBook","newBook","Date","now","createFormMarkup","fillObject","preventDefault","Object","values","some","value","alert","push","book","changeHandler","name","index","findIndex"],"version":3,"file":"02-video.53afad5d.js.map"}