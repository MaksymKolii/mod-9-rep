{"mappings":"YAAA,IAAMA,EAAU,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAaC,KAAKC,SAAW,GAEnCC,YAAW,WACLH,GACFF,EAAQ,iEAGiCC,EAApC,oD,GACN,I,IAGLK,QAAQC,IAAIT,GACZA,EAAQU,MACN,SAAAC,GACEH,QAAQC,IAAI,GAAOG,OAAJD,G,IAEjB,SAAAE,GACEL,QAAQC,IAAII,E,IAIhBb,EAAQU,MAER,SAAoBC,GAClBH,QAAQC,IAAI,8BACZD,QAAQC,IAAI,GAAOG,OAAJD,G,IAGjB,SAAoBG,GAClBN,QAAQC,IAAI,8BACZD,QAAQC,IAAI,GAASG,OAANE,G,IAuBR,IAAIb,SAAQ,SAACC,EAASC,GAC3BI,YAAW,WACMF,KAAKC,SAAW,IAG7BJ,EAAQ,4BAEEC,EAAL,0C,GARG,I,IAaYO,KAAKK,GAAoBC,MAAMC,GAa3D,SAASF,EAAmBJ,GAC1BH,QAAQC,IAAI,sBACZD,QAAQC,IAAI,GAAOG,OAAJD,G,CAGjB,SAASM,EAAiBH,GACxBN,QAAQC,IAAI,oBACZD,QAAQC,IAAIK,E,CAjBL,IAAIb,SAAQ,SAACC,EAASC,GACZE,KAAKC,SAAW,IAG7BJ,EAAQ,kBAEEC,EAAL,gC,IAakBO,KAAKK,GAAoBC,MAAMC,GAErD,IAAaC,KAYT,UAXFjB,QAAQC,QAAQ,oCAAyDU,OAALM,KAWhDR,MAEtB,SAAsBC,GAC3BH,QAAQC,IAAI,uBACZD,QAAQC,IAAI,GAAOG,OAAJD,G,IAJsCK,OAOvD,SAA2BF,GACzBN,QAAQC,IAAI,qBACZD,QAAQC,IAAIK,E,IAINK,MAAF,uCACHT,MAAK,SAAAU,G,OAAKA,EAAEC,M,IACZX,MAAK,SAAAY,GACJd,QAAQC,IAAIa,E,IA4ChB,SAASC,EAAIC,GACX,OAAO,IAAIvB,SAAQ,SAAAC,GACjB,IA2BmBuB,EAAKC,EA3BlBC,GA2BaF,EA3BQ,IA2BHC,EA3BS,KA4B5BrB,KAAKuB,MAAMvB,KAAKC,UAAYoB,EAAMD,EAAM,GAAKA,IA1BlDlB,YAAW,WACTL,EAAQ,CAAEsB,QAAOG,Q,GAChBA,E,IAnBPnB,QAAQC,IACN,2CAC+B,iCAGjCc,EAAI,SAASb,MAAK,SAACmB,GACjBrB,QAAQC,IAAIoB,E,IAGdrB,QAAQC,IAAK,qCAeb,IAAMqB,EAhCS,CACb,cACA,UACA,kBACA,aACA,cA2BsBC,IAAIR,GAE5BtB,QAAQ+B,KAAKF,GAAUpB,MAAK,SAAAuB,G,IAAGT,EAAKS,EAALT,MAAOG,EAAIM,EAAJN,KACpCnB,QAAQC,IACN,cAA8CG,OAAzBY,EAAM,qBAAqCZ,OAALe,EAAK,aACrC,gC,IAI/B1B,QAAQiC,IAAIJ,GAAUpB,MAAK,SAAAmB,GACzBrB,QAAQC,IAAIoB,GAEZrB,QAAQC,IACL,uCACD,+B","sources":["src/js/06-promise.js"],"sourcesContent":["const promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n\n  setTimeout(() => {\n    if (canFulfill) {\n      resolve('Промис 1 выполнился успешно, с результатом(исполнен, fulfied)');\n    }\n\n    reject('Промис1 выполнился с ошибкой (отклонен, rejected)');\n  }, 1000);\n});\n\nconsole.log(promise);\npromise.then(\n  res => {\n    console.log(`${res}`);\n  },\n  err => {\n    console.log(err);\n  }\n);\n\npromise.then(onFulfield, onRejected)\n\nfunction onFulfield(res) {\n  console.log('onFulfield 2 -> onFulfield');\n  console.log(`${res}`);\n}\n\nfunction onRejected(error) {\n  console.log('onRejected 2 -> onRejected');\n  console.log(`${error}`);\n}\n\n//chaining\n// promise\n//   .then(onFulfield)\n//   .then(x => {\n//     console.log(x);\n//     //throw new Error('Ошибка во втором then')\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   })\n//   .finally(() => {\n//     console.log('Я выполнюсь в любом случае!!!');\n//   });\n\nconst makeOrder = dish => {\n  const DELAY = 1000;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const passed = Math.random() > 0.5;\n\n      if (passed) {\n        resolve('makeOrder Вот Ваше блюдо');\n      }\n      reject('makeOrder Извините закончились продукты');\n    }, DELAY);\n  });\n};\n\nmakeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\nconst makeOrder1 = (dish, onResolved, onError) => {\n  return new Promise((resolve, reject) => {\n    const passed = Math.random() > 0.5;\n\n    if (passed) {\n      resolve('Вот Ваше блюдо');\n    }\n    reject('Извините закончились продукты');\n  });\n};\n\nfunction onMakeOrderSuccess(res) {\n  console.log('onMakeOrderSuccess');\n  console.log(`${res}`);\n}\n\nfunction onMakeOrderError(error) {\n  console.log('onMakeOrderError');\n  console.log(error);\n}\nmakeOrder1('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\nconst makeOrder2 = (dish, onResolved, onError) => {\n  return Promise.resolve(`makeOrder2 Вот Ваше блин - блюдо ${dish}`);\n\n  return new Promise((resolve, reject) => {\n    const passed = Math.random() > 0.5;\n\n    if (passed) {\n      resolve(`makeOrder2 Вот Ваше блин - блюдо ${dish}`);\n    }\n    reject('makeOrder2 Извините закончились продукты');\n  });\n};\nmakeOrder2('пирожок').then(onMakeOrderSuccess2).catch(onMakeOrderError2);\n\nfunction onMakeOrderSuccess2(res) {\n  console.log('onMakeOrderSuccess2');\n  console.log(`${res}`);\n}\n\nfunction onMakeOrderError2(error) {\n  console.log('onMakeOrderError2');\n  console.log(error);\n}\n\n//Покемоны  https://pokeapi.co/\nfetch('https://pokeapi.co/api/v2/pokemon/2')\n  .then(r => r.json())\n  .then(pokemon => {\n    console.log(pokemon);\n  });\n\n //[Промисы на примере бургер-вечеринки]( https://habr.com/ru/company/njx/blog/323066/)\n\n//асинхронная операция\nfunction cookBurger(type) {}\n\n// обычная операция\nfunction makeMilkshake(type) {}\n\nfunction order(type) {\n  return new Promise(function (resolve, reject) {\n    var burger = cookBurger(type);\n    burger.ready = function (err, burger) {\n      if (err) {\n        return reject(Error('Error while cooking'));\n      }\n      return resolve(burger);\n    };\n  });\n}\n\nconst horses = [\n  'Secretariat',\n  'Eclipce',\n  'West Australian',\n  'Flying Fox',\n  'Seabiscult',\n];\n\nconsole.log(\n  '%c Заезд начался, ставки не принимаются!',\n  'color: brown; font-size: 14px'\n);\n\nrun('Mango').then((x)=>{\n  console.log(x);\n})\n\nconsole.log(`Заезд окончен, принимаются ставки`\n// 'color: blue; font-size: 14px'\n);\n\nfunction run(horse) {\n  return new Promise(resolve => {\n    const time = getRandomTime(2000, 3500);\n\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\n//const promises = horses.map(horse => run(horse))\nconst promises = horses.map(run);\n//console.log(promises);\nPromise.race(promises).then(({ horse, time }) => {\n  console.log(\n    `%c Победил ${horse}, финишировав за ${time}, времени`,\n    'color: green; font-size: 14px'\n  );\n});\n\nPromise.all(promises).then(x => {\n  console.log(x);\n\n  console.log(\n    `%c Заезд окончен, принимаются ставки`,\n    'color: blue; font-size: 14px'\n  );\n});\n\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"],"names":["$0cf45e6ba905288d$var$promise","Promise","resolve","reject","canFulfill","Math","random","setTimeout","console","log","then","res","concat","err","error","$0cf45e6ba905288d$var$onMakeOrderSuccess","catch","$0cf45e6ba905288d$var$onMakeOrderError","dish","fetch","r","json","pokemon","$0cf45e6ba905288d$var$run","horse","min","max","time","floor","x","$0cf45e6ba905288d$var$promises","map","race","param","all"],"version":3,"file":"06-promise.764d5d5f.js.map"}