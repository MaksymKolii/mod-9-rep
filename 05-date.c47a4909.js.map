{"mappings":"AAiBA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAG9BG,EAAQ,CACZC,WAAY,KACZC,UAAU,EACVC,OAEEC,EADaC,EAAU,G,EAGzBC,QACE,GAAIC,KAAKL,SACP,OAEF,MAAMM,EAAYC,KAAKC,MACvBH,KAAKL,UAAW,EAChBK,KAAKN,WAAaU,aAAY,KAC5B,MACMC,EADcH,KAAKC,MACOF,GAE1BK,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,GAAYX,EAAUO,GACpDK,QAAQC,IAAI,GAAGL,KAAQC,KAASC,KAAWC,KAG3CZ,EADaC,EAAUO,GACF,GACpB,I,EAGLO,OACEC,cAAcb,KAAKN,YACnBM,KAAKL,UAAW,C,GA8FpB,SAASE,GAAgBS,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IAC/CtB,EAAKK,UAAUsB,YAAc,GAAGR,KAAQC,KAASC,KAAWC,G,CAI9D,SAASM,EAAeC,GACtB,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAGnC,SAASpB,EAAUqB,GAEjB,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAaZ,MAAO,C,KAVMP,EAAeS,KAAKC,MAAMN,EAAKI,I,MAE9BR,EAAeS,KAAKC,MAAMN,EAAMI,EAAOD,I,QAErCP,EAAeS,KAAKC,MAAMN,EAAOI,EAAOD,EAAQF,I,QAEhDL,EACdS,KAAKC,MAAMN,EAAQI,EAAOD,EAAQF,EAbrB,M,CArGjB3B,EAAMG;;;AAyENT,EAAKC,SAASsC,iBAAiB,QAASjC,EAAMM,MAAM4B,KAAKlC,IACzDN,EAAKI,QAAQmC,iBAAiB,QAASjC,EAAMmB,KAAKe,KAAKlC","sources":["src/js/05-date.js"],"sourcesContent":["// const date = new Date()\n// console.dir(date);\n\n// Создает ОБЪЕКТ new Date.getTime() с методами и т.д.\n// Создает просто значение времени как число  Date.now();\n\n// const day1 = Date.now();\n// console.log('day1',day1);\n// setTimeout(()=>{\n//     const day2 = Date.now();\n//     console.log('day1',day1);\n//     console.log('day2',day2);\n\n// console.log(day2-day1);\n\n// }, 3000)\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nconst timer = {\n  intervalId: null,\n  isActive: false,\n  init() {\n    const time = convertMs(0);\n    updateClockFace(time);\n  },\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      //ниже уже не надо и мы преобразовываем\n      const { days, hours, minutes, seconds } = convertMs(deltaTime);\n      console.log(`${days}:${hours}:${minutes}:${seconds}`);\n\n      const time = convertMs(deltaTime);\n      updateClockFace(time);\n    }, 1000);\n  },\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n  },\n};\n\ntimer.init();\n\n//! ----------------------------------------------------------------------------------------------------------------------------------\n//*  Создадим класс Timer на основе нашего объекта Этот класс будет предоставлять логику нашего таймера, наш класс не должен ни-\n// чего знать про Фу updateClockFace (обновление интерфейса-вставка данных в разметку) Если хотим обновлять интерфейс на каждом тикании\n//можем в Класс передать Фу обновл, положим ее в объект настроек const timer = new Timer({ onTicTac: updateClockFace}) т.е. создали\n// свойство onTicTac в которое передали ссылку на внешнюю функцию onClockFace. Класс будет знать, что ему может передадут св-во\n// onTicTac. Ф!! Функции addLeadingZero() и convertMs() сделаем методами класса т.к.они не отвечают за рисование Интерфейса\n\n// class Timer {\n//   constructor({ onTicTac }) {\n//     this.intervalId = null;\n//     this.isActive = false;\n//     this.onTicTac = onTicTac;\n//     this.init();\n//   }\n\n//   // для того чтоб сразу появлялось табло ( а не тогда, кокда на стпарт кликнули)\n//   init(){\n//     const time = this.convertMs(0);\n//     this.onTicTac(time);\n//   }\n//   start() {\n//     if (this.isActive) {\n//       return;\n//     }\n//     const startTime = Date.now();\n//     this.isActive = true;\n//     this.intervalId = setInterval(() => {\n//       const currentTime = Date.now();\n//       const deltaTime = currentTime - startTime;\n\n//       const time = this.convertMs(deltaTime);\n//       //ссылка на ФУ updateClockFace(time)\n//       this.onTicTac(time);\n//     }, 1000);\n//   }\n//   stop() {\n//     clearInterval(this.intervalId);\n//     this.isActive = false;\n// // Для обнуления  при стопе\n//     const time = this.convertMs(0);\n//       this.onTicTac(time);\n//   }\n\n//   addLeadingZero(value) {\n//     return String(value).padStart(2, '0');\n//   }\n\n//   convertMs(ms) {\n//     const second = 1000;\n//     const minute = second * 60;\n//     const hour = minute * 60;\n//     const day = hour * 24;\n//     const days = this.addLeadingZero(Math.floor(ms / day));\n//     const hours = this.addLeadingZero(Math.floor((ms % day) / hour));\n//     const minutes = this.addLeadingZero(\n//       Math.floor(((ms % day) % hour) / minute)\n//     );\n//     const seconds = this.addLeadingZero(\n//       Math.floor((((ms % day) % hour) % minute) / second)\n//     );\n\n//     return { days, hours, minutes, seconds };\n//   }\n// }\n\n// const timer = new Timer({\n//   onTicTac: updateClockFace,\n// });\n//!====================================================================================================================================\n\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer))\n\n// ?Повесил disabled или снимаю для домашки \n// refs.startBtn.addEventListener('click', () => {\n//   refs.startBtn.disabled = true;\n//   refs.stopBtn.disabled = false;\n//   timer.start();\n// });\n\n// refs.stopBtn.addEventListener('click', () => {\n//   refs.startBtn.disabled = false;\n//   refs.stopBtn.disabled = true;\n\n//   timer.stop();\n// });\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n  refs.clockface.textContent = `${days}:${hours}:${minutes}:${seconds}`;\n}\n\n// Принимает число, приводит к строке и добавляет в значение 0,  если число меньше 2-х знакв\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = addLeadingZero(Math.floor(ms / day));\n  // Remaining hours\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = addLeadingZero(\n    Math.floor((((ms % day) % hour) % minute) / second)\n  );\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["$cf63a7dda024bc7c$var$refs","startBtn","document","querySelector","stopBtn","clockface","$cf63a7dda024bc7c$var$timer","intervalId","isActive","init","$cf63a7dda024bc7c$var$updateClockFace","$cf63a7dda024bc7c$var$convertMs","start","this","startTime","Date","now","setInterval","deltaTime","days","hours","minutes","seconds","console","log","stop","clearInterval","textContent","$cf63a7dda024bc7c$var$addLeadingZero","value","String","padStart","ms","minute","second","hour","day","Math","floor","addEventListener","bind"],"version":3,"file":"05-date.c47a4909.js.map"}