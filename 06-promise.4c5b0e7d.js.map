{"mappings":"AAAA,MAAMA,EAAU,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAaC,KAAKC,SAAW,GAEnCC,YAAW,KACLH,GACFF,EACE,kEAIJC,EAAO,qDAAuF,GAC7F,IAAK,IAEVK,QAAQC,IAAIT,GAWZA,EAAQU,MAER,SAAoBC,GAClBH,QAAQC,IAAI,8BACZD,QAAQC,IAAI,GAAGE,I,IAGjB,SAAoBC,GAClBJ,QAAQC,IAAI,8BACZD,QAAQC,IAAI,GAAGG,I,IAqBC,IAAAC,KAgBR,UAdD,IAAIZ,SAAQ,CAACC,EAASC,KAC3BI,YAAW,KACMF,KAAKC,SAAW,IAG7BJ,EAAQ,8BAACW,MAEGV,EACZ,+DAACU,IAAA,GATO,IAWH,KAIeH,MAa5B,SAA4BC,GAC1BH,QAAQC,IAAI,sBACZD,QAAQC,IAAI,GAAGE,I,IAfoCG,OAkBrD,SAA0BF,GACxBJ,QAAQC,IAAI,oBACZD,QAAQC,IAAIG,E,IA6BNG,MAAF,uCACHL,MAAKM,GAAKA,EAAEC,SACZP,MAAKQ,IACJV,QAAQC,IAAIS,EAAQ,IAgBxB,MAAMC,EAAmBC,GAChBL,MAAM,qCAAqCK,KAAMV,MAAKM,GAAKA,EAAEC,SAItE,SAASI,EAAeH,GAEtBV,QAAQC,IAAI,oCACZD,QAAQC,IAAIS,E,CAGd,SAASI,EAAaV,GAEpBJ,QAAQC,IAAI,gCACZD,QAAQC,IAAIG,E,CAEdO,EAAiB,GAAGT,KAAKW,GAAgBP,MAAMQ,GAC/CH,EAAiB,GAAGT,KAAKW,GAAgBP,MAAMQ,GA6B/C,MAAMC,EAAS,CACb,cACA,UACA,kBACA,aACA,cAGF,IAAIC,EAAa,EACjB,MAAMC,EAAM,CAEVC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAyBpC,SAASI,EAAkBC,GACzBR,EAAKI,YAAYK,YAAcD,C,CAGjC,SAASE,EAAoBF,GAC3BR,EAAKK,cAAcI,YAAcD,C,CAsCnC,SAASG,EAAIC,GACX,OAAO,IAAIpC,SAAQC,IACjB,MAAMoC,GAxFaC,EAwFQ,IAxFHC,EAwFS,KAvF5BnC,KAAKoC,MAAMpC,KAAKC,UAAYkC,EAAMD,EAAM,GAAKA,IAD9C,IAAeA,EAAKC,EA0FxBjC,YAAW,KACTL,EAAQ,C,MAAEmC,E,KAAOC,GAAO,GACvBA,EAAK,G,CAnDZb,EAAKC,SAASgB,iBAAiB,SA+B/B,WACElB,IACA,MAAMmB,EAAWpB,EAAOqB,IAAIR,GAE5BJ,EAAkB,IAClBG,EAAoB,yCArBAU,EAsBPF,EArBb1C,QAAQ6C,KAAKD,GAAWnC,MAAK,EAAC2B,MAAEA,EAAKC,KAAEA,MAErCN,EAAmB,WAACK,qBAAuBC,cAR/C,UAA0BD,MAACA,EAAKC,KAAEA,EAAMS,YAAAC,IACtC,MAAMC,EAAK,WAAWD,aAAuBX,aAAiBC,cAC9Db,EAAKM,UAAUmB,mBAAmB,YAAaD,E,CAOlBE,CAAV,C,MAACd,E,KAAOC,E,YAAMd,GAAa,IAIhD,SAAoBqB,GAClB5C,QAAQmD,IAAIP,GAAWnC,MAAK,KAE1ByB,EAAoB,oCAAC,G,CAYvBkB,CAAWV,GAvBb,IAAsBE,C","sources":["src/js/06-promise.js"],"sourcesContent":["const promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n\n  setTimeout(() => {\n    if (canFulfill) {\n      resolve(\n        '✅Промис 1 выполнился успешно, с результатом(исполнен, fulfied)'\n      );\n    }\n\n    reject('❌Промис1 выполнился с ошибкой (отклонен, rejected)');\n  }, 1000);\n});\nconsole.log(promise);\n\n// promise.then(\n//   res => {\n//     console.log(`${res}`);\n//   },\n//   err => {\n//     console.log(err);\n//   }\n// );\n\npromise.then(onFulfield, onRejected);\n\nfunction onFulfield(res) {\n  console.log('onFulfield 2 -> onFulfield');\n  console.log(`${res}`);\n}\n\nfunction onRejected(error) {\n  console.log('onRejected 2 -> onRejected');\n  console.log(`${error}`);\n}\n\n//chaining\n// promise\n//   .then(onFulfield)\n//   .then(x => {\n//     console.log(x);\n//     //throw new Error('Ошибка во втором then')\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   })\n//   .finally(() => {\n//     console.log('Я выполнюсь в любом случае!!!');\n//   });\n\nconst makeOrder = dish => {\n  const DELAY = 1000;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const passed = Math.random() > 0.5;\n\n      if (passed) {\n        resolve(`makeOrder ✅ Вот Ваше блюдо ${dish} `);\n      }\n      reject(\n        `makeOrder ❌ Извините закончились продукты не сможем сделать ${dish}`\n      );\n    }, DELAY);\n  });\n};\n\nmakeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n// const makeOrder1 = (dish, onResolved, onError) => {\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     if (passed) {\n//       resolve('Вот Ваше блюдо');\n//     }\n//     reject('Извините закончились продукты');\n//   });\n// };\n\nfunction onMakeOrderSuccess(res) {\n  console.log('onMakeOrderSuccess');\n  console.log(`${res}`);\n}\n\nfunction onMakeOrderError(error) {\n  console.log('onMakeOrderError');\n  console.log(error);\n}\n// makeOrder1('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n// const makeOrder2 = (dish, onResolved, onError) => {\n//   return Promise.resolve(`makeOrder2 Вот Ваше блин - блюдо ${dish}`);\n\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     if (passed) {\n//       resolve(`makeOrder2 Вот Ваше блин - блюдо ${dish}`);\n//     }\n//     reject('makeOrder2 Извините закончились продукты');\n//   });\n// };\n// makeOrder2('пирожок').then(onMakeOrderSuccess2).catch(onMakeOrderError2);\n\n// function onMakeOrderSuccess2(res) {\n//   console.log('onMakeOrderSuccess2');\n//   console.log(`${res}`);\n// }\n\n// function onMakeOrderError2(error) {\n//   console.log('onMakeOrderError2');\n//   console.log(error);\n// }\n\n//Покемоны  https://pokeapi.co/\nfetch('https://pokeapi.co/api/v2/pokemon/2')\n  .then(r => r.json())\n  .then(pokemon => {\n    console.log(pokemon);\n  });\n\n// так глупо делать\n// const fetchPokemonBiId = id =>{\n//   fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n// .then(r => r.json())\n// .then(pokemon => {\n//   console.log(pokemon);\n// });\n// }\n\n// fetchPokemonBiId(1);\n// fetchPokemonBiId(2);\n// fetchPokemonBiId(3);\n\nconst fetchPokemonBiId = id => {\n  return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json());\n};\n\n\nfunction onFetchSuccess(pokemon){\n\n  console.log('onFetchSuccess -> onFetchSuccess');\n  console.log(pokemon);\n}\n\nfunction onFetchError(error){\n\n  console.log('onFetchError -> onFetchError');\n  console.log(error);\n}\nfetchPokemonBiId(1).then(onFetchSuccess).catch(onFetchError);\nfetchPokemonBiId(2).then(onFetchSuccess).catch(onFetchError);\n\n\n//[Промисы на примере бургер-вечеринки]( https://habr.com/ru/company/njx/blog/323066/)\n\n//асинхронная операция\nfunction cookBurger(type) {}\n\n// обычная операция\nfunction makeMilkshake(type) {}\n\nfunction order(type) {\n  return new Promise(function (resolve, reject) {\n    var burger = cookBurger(type);\n    burger.ready = function (err, burger) {\n      if (err) {\n        return reject(Error('Error while cooking'));\n      }\n      return resolve(burger);\n    };\n  });\n}\n\n//===========================================  Ипплдром   =====================================================================\n\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst horses = [\n  'Secretariat',\n  'Eclipce',\n  'West Australian',\n  'Flying Fox',\n  'Seabiscult',\n];\n\nlet raceCounter =0;\nconst refs ={\n\n  startBtn: document.querySelector('.js-start-race'),\n  winnerField: document.querySelector('.js-winner'),\n  progressField: document.querySelector('.js-progress'),\n  tableBody: document.querySelector('.js-results-table > tbody'),\n}\n\n// Преобразуем то что ниже в разные функции\n// refs.startBtn.addEventListener('click', ()=>{\n//   const promises = horses.map(run)\n\n//   refs.winnerField.textContent =''\n//   refs.progressField.textContent = 'Заезд начался, ставки не принимаются!';\n\n//   Promise.race(promises).then(({ horse, time }) => {\n//     refs.winnerField.textContent = \n//       `Победил ${horse}, финишировав за ${time}, времени`;\n//   });\n\n//   Promise.all(promises).then(x => {\n//     console.log(x);\n  \n//     refs.progressField.textContent =\n//       `Заезд окончен, принимаются ставки`;\n//   });\n// })\n\nrefs.startBtn.addEventListener('click', onStart)\n\nfunction updateWinnerField(message){\n  refs.winnerField.textContent = message;\n}\n\nfunction updateProgressField(message){\n  refs.progressField.textContent = message;\n}\n\nfunction updateResultTime({horse, time, raceCounter}){\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`\n  refs.tableBody.insertAdjacentHTML('beforeend', tr)\n}\n\nfunction determWinner(promisesP){\n  Promise.race(promisesP).then(({ horse, time }) => {\n    \n    updateWinnerField( `Победил ${horse}, финишировав за ${time}, времени`)\n    updateResultTime({horse, time, raceCounter}) \n  });\n}\n\nfunction waitForAll(promisesP){\n  Promise.all(promisesP).then(() => {\n  \n    updateProgressField(`Заезд окончен, принимаются ставки`);\n\n  });\n}\n\nfunction onStart(){\n  raceCounter ++\n  const promises = horses.map(run)\n\n  updateWinnerField('')\n  updateProgressField('Заезд начался, ставки не принимаются!');\n  determWinner(promises)\n  waitForAll(promises)\n}\n\n// run('Mango').then(x => {\n//   console.log(x);\n// });\n\nfunction run(horse) {\n  return new Promise(resolve => {\n    const time = getRandomTime(1000, 2500);\n\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\n\n//* Скрипт без подключения к разметке\n//-------------------------------------------------------------------------------------------------------------------------\n\n// console.log(\n//   '%c Заезд начался, ставки не принимаются!',\n//   'color: brown; font-size: 14px'\n// );\n\n// //проходимся Мапом по массиву лошадей и для каждой лош запускаем фу run и записываем полученный масив в --const promises\n// //const promises = horses.map(horse => run(horse))\n// const promises = horses.map(run);\n\n\n// //console.log(promises);\n\n// Promise.race(promises).then(({ horse, time }) => {\n//   console.log(\n//     `%c Победил ${horse}, финишировав за ${time}, времени`,\n//     'color: green; font-size: 14px'\n//   );\n// });\n\n// Promise.all(promises).then(x => {\n//   console.log(x);\n\n//   console.log(\n//     `%c Заезд окончен, принимаются ставки`,\n//     'color: blue; font-size: 14px'\n//   );\n// });\n\n//  //-------------------------------------------------------------------------------------------------------------------------\n"],"names":["$be04b3e826d0904e$var$promise","Promise","resolve","reject","canFulfill","Math","random","setTimeout","console","log","then","res","error","dish","catch","fetch","r","json","pokemon","$be04b3e826d0904e$var$fetchPokemonBiId","id","$be04b3e826d0904e$var$onFetchSuccess","$be04b3e826d0904e$var$onFetchError","$be04b3e826d0904e$var$horses","$be04b3e826d0904e$var$raceCounter","$be04b3e826d0904e$var$refs","startBtn","document","querySelector","winnerField","progressField","tableBody","$be04b3e826d0904e$var$updateWinnerField","message","textContent","$be04b3e826d0904e$var$updateProgressField","$be04b3e826d0904e$var$run","horse","time","min","max","floor","addEventListener","promises","map","promisesP","race","raceCounter","raceCounter1","tr","insertAdjacentHTML","$be04b3e826d0904e$var$updateResultTime","all","$be04b3e826d0904e$var$waitForAll"],"version":3,"file":"06-promise.4c5b0e7d.js.map"}