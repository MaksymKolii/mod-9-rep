{"mappings":"YAoBA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAG9BG,EAAQ,CACZC,WAAY,KACZC,UAAU,EACVC,OAEEC,EADaC,EAAU,G,EAGzBC,QACE,GAAIC,KAAKL,SACP,OAEF,MAAMM,EAAYC,KAAKC,MACvBH,KAAKL,UAAW,EAChBK,KAAKN,WAAaU,aAAY,KAC5B,MACMC,EADcH,KAAKC,MACOF,GAE1BK,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,GAAYX,EAAUO,GACpDK,QAAQC,IAAI,GAAGL,KAAQC,KAASC,KAAWC,KAG3CZ,EADaC,EAAUO,GACF,GACpB,I,EAGLO,OACEC,cAAcb,KAAKN,YACnBM,KAAKL,UAAW,C,GAIpBF,EAAMG,OAmEN,MAAMkB,EAAS;;AA1Df,MASElB,OACE,MAAMmB,EAAOf,KAAKgB,UAAU,GAC5BhB,KAAKiB,SAASF,E,CAEhBhB,QACE,GAAIC,KAAKL,SACP,OAEF,MAAMM,EAAYC,KAAKC,MACvBH,KAAKL,UAAW,EAChBK,KAAKN,WAAaU,aAAY,KAC5B,MACMC,EADcH,KAAKC,MACOF,EAE1Bc,EAAOf,KAAKgB,UAAUX,GAE5BL,KAAKiB,SAASF,EAAK,GAClB,I,CAELH,OACEC,cAAcb,KAAKN,YACnBM,KAAKL,UAAW,EAEhB,MAAMoB,EAAOf,KAAKgB,UAAU,GAC1BhB,KAAKiB,SAASF,E,CAGlBG,eAAeC,GACb,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAGnCL,UAAUM,GACR,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAUZ,MAAO,C,KATMzB,KAAKkB,eAAeS,KAAKC,MAAMN,EAAKI,I,MACnC1B,KAAKkB,eAAeS,KAAKC,MAAMN,EAAMI,EAAOD,I,QAC1CzB,KAAKkB,eACnBS,KAAKC,MAAMN,EAAOI,EAAOD,EAAQF,I,QAEnBvB,KAAKkB,eACnBS,KAAKC,MAAMN,EAAQI,EAAOD,EAAQF,EAVrB,M,CAxCjBM,aAAYZ,SAAEA,IACZjB,KAAKN,WAAa,KAClBM,KAAKL,UAAW,EAChBK,KAAKiB,SAAWA,EAChBjB,KAAKJ,M,GAqDgB,CACvBqB,SAAUpB;uIAsBZ;SAASA,GAAgBS,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IAC/CtB,EAAKK,UAAUsC,YAAc,GAAGxB,KAAQC,KAASC,KAAWC,G,CAI9D,SAASsB,EAAeZ,GACtB,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAGnC,SAASvB,EAAUwB,GAEjB,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAaZ,MAAO,C,KAVMM,EAAeJ,KAAKC,MAAMN,EAAKI,I,MAE9BK,EAAeJ,KAAKC,MAAMN,EAAMI,EAAOD,I,QAErCM,EAAeJ,KAAKC,MAAMN,EAAOI,EAAOD,EAAQF,I,QAEhDQ,EACdJ,KAAKC,MAAMN,EAAQI,EAAOD,EAAQF,EAbrB,M,CA5BjBpC,EAAKC,SAAS4C,iBAAiB,QAASlB,EAAOf,MAAMkC,KAAKxC,IAC1DN,EAAKI,QAAQyC,iBAAiB,QAASlB,EAAOF,KAAKqB,KAAKxC,G","sources":["src/js/05-date.js"],"sourcesContent":["// const date = new Date()\n// console.dir(date);\n\n// Создает ОБЪЕКТ new Date.getTime() с методами и т.д.\n// Создает просто значение времени как число  Date.now();\n\n// const day1 = Date.now();\n// console.log('day1',day1);\n// setTimeout(()=>{\n//     const day2 = Date.now();\n//     console.log('day1',day1);\n//     console.log('day2',day2);\n\n// console.log(day2-day1);\n\n// }, 3000)\n\n\n// 1 Создали объект таймер, в нем создали метод старт который будет запускать таймер с интервалом 1сек\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nconst timer = {\n  intervalId: null,\n  isActive: false,\n  init() {\n    const time = convertMs(0);\n    updateClockFace(time);\n  },\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      //ниже уже не надо и мы преобразовываем\n      const { days, hours, minutes, seconds } = convertMs(deltaTime);\n      console.log(`${days}:${hours}:${minutes}:${seconds}`);\n\n      const time = convertMs(deltaTime);\n      updateClockFace(time);\n    }, 1000);\n  },\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n  },\n};\n\ntimer.init();\n\n//! ----------------------------------------------------------------------------------------------------------------------------------\n//*  Создадим класс Timer на основе нашего объекта Этот класс будет предоставлять логику нашего таймера, наш класс не должен ни-\n// чего знать про Фу updateClockFace (обновление интерфейса-вставка данных в разметку) Если хотим обновлять интерфейс на каждом тикании\n//можем в Класс передать Фу обновл, положим ее в объект настроек const timer = new Timer({ onTicTac: updateClockFace}) т.е. создали\n// свойство onTicTac в которое передали ссылку на внешнюю функцию onClockFace. Класс будет знать, что ему может передадут св-во\n// onTicTac. Ф!! Функции addLeadingZero() и convertMs() сделаем методами класса т.к.они не отвечают за рисование Интерфейса\n\nclass Timer {\n  constructor({ onTicTac }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTicTac = onTicTac;\n    this.init();\n  }\n\n  // для того чтоб сразу появлялось табло ( а не тогда, кокда на стпарт кликнули)\n  init(){\n    const time = this.convertMs(0);\n    this.onTicTac(time);\n  }\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n\n      const time = this.convertMs(deltaTime);\n      //ссылка на ФУ updateClockFace(time)\n      this.onTicTac(time);\n    }, 1000);\n  }\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n// Для обнуления  при стопе\n    const time = this.convertMs(0);\n      this.onTicTac(time);\n  }\n\n  addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    const days = this.addLeadingZero(Math.floor(ms / day));\n    const hours = this.addLeadingZero(Math.floor((ms % day) / hour));\n    const minutes = this.addLeadingZero(\n      Math.floor(((ms % day) % hour) / minute)\n    );\n    const seconds = this.addLeadingZero(\n      Math.floor((((ms % day) % hour) % minute) / second)\n    );\n\n    return { days, hours, minutes, seconds };\n  }\n}\n\nconst timer1 = new Timer({\n  onTicTac: updateClockFace,\n});\n//!====================================================================================================================================\n\n\nrefs.startBtn.addEventListener('click', timer1.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer1.stop.bind(timer))\n\n// ?Повесил disabled или снимаю для домашки \n// refs.startBtn.addEventListener('click', () => {\n//   refs.startBtn.disabled = true;\n//   refs.stopBtn.disabled = false;\n//   timer.start();\n// });\n\n// refs.stopBtn.addEventListener('click', () => {\n//   refs.startBtn.disabled = false;\n//   refs.stopBtn.disabled = true;\n\n//   timer.stop();\n// });\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n  refs.clockface.textContent = `${days}:${hours}:${minutes}:${seconds}`;\n}\n\n// Принимает число, приводит к строке и добавляет в значение 0,  если число меньше 2-х знакв\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = addLeadingZero(Math.floor(ms / day));\n  // Remaining hours\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = addLeadingZero(\n    Math.floor((((ms % day) % hour) % minute) / second)\n  );\n\n  return { days, hours, minutes, seconds };\n}\n\n\n\n\n\n//* Вариант без класса  goit--hw-09 ---------------------------------------------------------------------------------------------------\n// import flatpickr from 'flatpickr';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import 'flatpickr/dist/flatpickr.min.css';\n\n// let finalTime = 0;\n// const refs = {\n//   input: document.querySelector('#datetime-picker'),\n//   startBtn: document.querySelector('button[data-start]'),\n//   days: document.querySelector('span[data-days]'),\n//   hourss: document.querySelector('span[data-hours]'),\n//   minutes: document.querySelector('span[data-minutes]'),\n//   seconds: document.querySelector('span[data-seconds]'),\n// };\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     if (selectedDates[0] <= Date.now()) {\n//       Notify.failure('Please choose a date in the future');\n//       refs.startBtn.disabled = true;\n//       return;\n//     }\n//     refs.startBtn.disabled = false;\n//     finalTime = selectedDates[0];\n//   },\n// };\n\n// flatpickr('input#datetime-picker', options);\n\n// const timer = {\n//   intervalId: null,\n//   start() {\n//     refs.startBtn.disabled = true;\n//     refs.input.disabled = true;\n//     this.intervalId = setInterval(() => {\n//       const realTime = Date.now();\n//       const diff = finalTime - realTime;\n//       const timeComponents = convertMs(diff);\n\n//       if (diff < 1000) {\n//         clearInterval(this.intervalId);\n//       }\n//       updateInterfaceTime(timeComponents);\n//     }, 1000);\n//   },\n// };\n\n\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// function convertMs(ms) {\n//   // Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   // Remaining days\n//   const days = addLeadingZero(Math.floor(ms / day));\n//   // Remaining hours\n//   const hours = addLeadingZero(Math.floor((ms % day) / hour));\n//   // Remaining minutes\n//   const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n//   // Remaining seconds\n//   const seconds = addLeadingZero(\n//     Math.floor((((ms % day) % hour) % minute) / second)\n//   );\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function updateInterfaceTime({ days, hours, minutes, seconds }) {\n//   refs.days.textContent = `${days}`;\n//   refs.hourss.textContent = `${hours}`;\n//   refs.minutes.textContent = `${minutes}`;\n//   refs.seconds.textContent = `${seconds}`;\n// }\n\n// function onButtonClick() {\n//   timer.start();\n// }\n// refs.startBtn.addEventListener('click', onButtonClick);"],"names":["$8276efdaa8525ad8$var$refs","startBtn","document","querySelector","stopBtn","clockface","$8276efdaa8525ad8$var$timer","intervalId","isActive","init","$8276efdaa8525ad8$var$updateClockFace","$8276efdaa8525ad8$var$convertMs","start","this","startTime","Date","now","setInterval","deltaTime","days","hours","minutes","seconds","console","log","stop","clearInterval","$8276efdaa8525ad8$var$timer1","time","convertMs","onTicTac","addLeadingZero","value","String","padStart","ms","minute","second","hour","day","Math","floor","constructor","textContent","$8276efdaa8525ad8$var$addLeadingZero","addEventListener","bind"],"version":3,"file":"05-date.dfb8b909.js.map"}